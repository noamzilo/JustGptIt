name: Deploy Backend to GCP

on:
  push:
    branches: 
      - main
      - backend
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Debug Environment Variables
      run: |
        echo -e "\033[0;31m--- Debugging Environment ---\033[0m"
        echo -e "\033[0;31mCurrent directory: $(pwd)\033[0m"
        echo -e "\033[0;31mDirectory contents:\033[0m"
        ls -la
        echo -e "\033[0;31mGCP_SA_KEY is set: ${{ secrets.GCP_SA_KEY != '' }}\033[0m"
        echo -e "\033[0;31mGCP_PROJECT_ID is set: ${{ secrets.GCP_PROJECT_ID != '' }}\033[0m"


    # Setup GCP Credentials
    - name: Set up GCP Credentials
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      run: |
        echo -e "\033[0;31m--- Setting up GCP Credentials ---\033[0m"
        echo -e "\033[0;31mGCP_SA_KEY length: ${#GCP_SA_KEY}\033[0m"
        if [ -z "$GCP_SA_KEY" ]; then
          echo -e "\033[0;31mERROR: GCP_SA_KEY is empty\033[0m"
        else
          echo -e "\033[0;31mCreating credentials file\033[0m"
          mkdir -p backend/creds
          echo "$GCP_SA_KEY" | base64 -d > backend/creds/gcp-sa-key.json
          chmod 600 backend/creds/gcp-sa-key.json
          echo -e "\033[0;31mCredentials file created. Contents of backend/creds:\033[0m"
          ls -la backend/creds
          echo -e "\033[0;31mFirst few lines of the credentials file:\033[0m"
          head -n 3 backend/creds/gcp-sa-key.json
        fi

    # Set up Cloud SDK with GCP Credentials
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: backend/creds/gcp-sa-key.json
        export_default_credentials: true

    # Build the Docker image
    - name: Build Docker Image
      run: |
        echo "Building Docker image..."
        docker compose build

    # Tag and Push Docker Image to GCR
    - name: Tag and Push Docker Image to GCR
      run: |
        PROJECT_ID="academic-veld-436919-g0"
        LOCAL_IMAGE_NAME="personal-website-backend"
        GCR_IMAGE_NAME="gcr.io/${PROJECT_ID}/${LOCAL_IMAGE_NAME}"
        
        echo "Tagging Docker image for GCR..."
        docker tag ${LOCAL_IMAGE_NAME}:latest ${GCR_IMAGE_NAME}:latest
        
        echo "Pushing Docker image to GCR..."
        docker push ${GCR_IMAGE_NAME}:latest

    # Deploy to Cloud Run
    - name: Deploy to Cloud Run
      run: |
        PROJECT_ID="academic-veld-436919-g0"
        REGION="us-central1"
        SERVICE_NAME="personal-website-backend"
        GCR_IMAGE_NAME="gcr.io/${PROJECT_ID}/personal-website-backend"
        SERVICE_ACCOUNT="personal-website-deployer@academic-veld-436919-g0.iam.gserviceaccount.com"
        
        echo "Deploying to Cloud Run..."
        gcloud run deploy $SERVICE_NAME \
          --image ${GCR_IMAGE_NAME}:latest \
          --project $PROJECT_ID \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars="DEBUG=1,GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json" \
          --port=8080 \
          --service-account=$SERVICE_ACCOUNT

    # Print the service URL after deployment
    - name: Print Service URL
      run: |
        SERVICE_NAME="personal-website-backend"
        PROJECT_ID="academic-veld-436919-g0"
        REGION="us-central1"
        
        echo "Fetching Cloud Run service URL..."
        gcloud run services describe $SERVICE_NAME \
          --project $PROJECT_ID \
          --region $REGION \
          --format="value(status.url)"

    # Clean up GCP credentials
    - name: Clean up
      if: always()
      run: rm -f backend/creds/gcp-sa-key.json

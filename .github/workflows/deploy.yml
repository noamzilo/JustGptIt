name: Deploy Backend to GCP

on:
  push:
    branches: 
      - main
      - backend
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    container:
      image: node:16
    defaults:
      run:
        working-directory: ./backend

    steps:
    # 1. Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v2

    # 2. Install Google Cloud SDK and kubectl
    - name: Install Google Cloud SDK and kubectl
      run: |
        # Update package list and install prerequisites
        apt-get update && apt-get install -y apt-transport-https ca-certificates gnupg curl

        # Add the Google Cloud SDK distribution URI as a package source
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

        # Import the Google Cloud public key
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

        # Update and install the Cloud SDK
        apt-get update && apt-get install -y google-cloud-sdk

        # Install kubectl using apt
        apt-get install -y kubectl

        # Verify installations
        gcloud --version
        kubectl version --client
      shell: bash

    # 3. Cache Docker layers to speed up builds
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # 4. Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # 5. Authenticate with Google Cloud using service account credentials
    - name: Set up GCP Credentials
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      run: |
        echo "$GCP_SA_KEY" | base64 -d > /tmp/gcp-key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    # 6. Configure Docker to use GCloud credentials for pushing images
    - name: Configure Docker to use GCloud credentials
      run: |
        gcloud auth configure-docker gcr.io --quiet

    # 7. Build and push the Docker image to Google Container Registry (GCR)
    - name: Build and push Docker Image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        push: true
        tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/personal-website-backend:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    # 8. Update the Docker cache for future builds
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    # 9. Deploy the Docker image to Google Cloud Run
    - name: Deploy to Cloud Run
      run: |
        PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
        REGION="us-central1"
        SERVICE_NAME="personal-website-backend"
        GCR_IMAGE_NAME="gcr.io/${PROJECT_ID}/personal-website-backend"
        SERVICE_ACCOUNT="personal-website-deployer@${PROJECT_ID}.iam.gserviceaccount.com"

        gcloud run deploy $SERVICE_NAME \
          --image ${GCR_IMAGE_NAME}:latest \
          --project $PROJECT_ID \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars="DEBUG=1,GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-credentials.json" \
          --port=8080 \
          --service-account=$SERVICE_ACCOUNT

    # 10. Print the deployed service URL
    - name: Print Service URL
      run: |
        SERVICE_NAME="personal-website-backend"
        PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
        REGION="us-central1"

        echo -e "\033[0;31mFetching Cloud Run service URL...\033[0m"
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --project $PROJECT_ID \
          --region $REGION \
          --format="value(status.url)")

        echo "Service URL: $SERVICE_URL"

    # 11. Clean up sensitive files
    - name: Clean up
      if: always()
      run: rm -f /tmp/gcp-key.json
